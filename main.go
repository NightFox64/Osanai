package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ChatData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–µ
type ChatData struct {
	MessageCount int `json:"message_count"`
	Threshold    int `json:"threshold"`
}

// BotData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —á–∞—Ç–æ–≤
type BotData struct {
	Chats map[int64]ChatData `json:"chats"`
	mu    sync.RWMutex
}

const (
	dataFile    = "bot_data.json"
	maxMessages = 10000
	gifID       = "CgACAgIAAxkBAAMDaD2NxM7H1-jBWRjBHYxlIxNOWIkAAr5zAAKrXvBJaM6laThye-g2BA"
)

var bot *tgbotapi.BotAPI

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	token := "7843550853:AAE1Ih5G1WuEnKDPSXRj3DaOLB6y8-mhBF8" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
	var err error

	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panicf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
	_, err = bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	botData := NewBotData()
	if err := botData.LoadFromFile(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞ –Ω–µ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
		handleMessage(update.Message, botData)
	}
}

// NewBotData —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
func NewBotData() *BotData {
	return &BotData{
		Chats: make(map[int64]ChatData),
	}
}

// LoadFromFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
func (bd *BotData) LoadFromFile() error {
	bd.mu.Lock()
	defer bd.mu.Unlock()

	file, err := os.Open(dataFile)
	if err != nil {
		if os.IsNotExist(err) {
			log.Println("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
			// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
			if err := bd.saveToFile(); err != nil {
				return err
			}
			return nil
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&bd.Chats); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è %d —á–∞—Ç–æ–≤", len(bd.Chats))
	return nil
}

// saveToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
func (bd *BotData) saveToFile() error {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
	tempFile := dataFile + ".tmp"
	file, err := os.Create(tempFile)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	if err := encoder.Encode(bd.Chats); err != nil {
		os.Remove(tempFile)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
	file.Close()

	// –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º
	if err := os.Rename(tempFile, dataFile); err != nil {
		os.Remove(tempFile)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	return nil
}

// SaveToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
func (bd *BotData) SaveToFile() error {
	bd.mu.Lock()
	defer bd.mu.Unlock()
	return bd.saveToFile()
}

// GetChatData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
func (bd *BotData) GetChatData(chatID int64) (ChatData, bool) {
	bd.mu.RLock()
	defer bd.mu.RUnlock()

	data, exists := bd.Chats[chatID]
	return data, exists
}

// SetChatData —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
func (bd *BotData) SetChatData(chatID int64, data ChatData) error {
	bd.mu.Lock()
	defer bd.mu.Unlock()

	if bd.Chats == nil {
		bd.Chats = make(map[int64]ChatData)
	}

	bd.Chats[chatID] = data
	return bd.saveToFile()
}

// ResetChatCounter —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func (bd *BotData) ResetChatCounter(chatID int64) error {
	bd.mu.Lock()
	defer bd.mu.Unlock()

	if data, exists := bd.Chats[chatID]; exists {
		data.MessageCount = 0
		bd.Chats[chatID] = data
		return bd.saveToFile()
	}
	return nil
}

// IncrementMessageCount —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func (bd *BotData) IncrementMessageCount(chatID int64) (ChatData, error) {
	bd.mu.Lock()
	defer bd.mu.Unlock()

	if bd.Chats == nil {
		bd.Chats = make(map[int64]ChatData)
	}

	data := bd.Chats[chatID]
	data.MessageCount++
	bd.Chats[chatID] = data

	err := bd.saveToFile()
	return data, err
}

func handleMessage(message *tgbotapi.Message, botData *BotData) {
	chatID := message.Chat.ID
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %d: %s", chatID, message.Text)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			sendWelcomeMessage(chatID)
			return

		case "set":
			handleSetCommand(message, botData)
			return

		case "status":
			handleStatusCommand(message, botData)
			return

		case "reset":
			handleResetCommand(message, botData)
			return

		default:
			sendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
			return
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	chatData, exists := botData.GetChatData(chatID)
	if !exists || chatData.Threshold == 0 {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
	newData, err := botData.IncrementMessageCount(chatID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	log.Printf("–ß–∞—Ç %d: —Å–æ–æ–±—â–µ–Ω–∏–µ %d/%d", chatID, newData.MessageCount, newData.Threshold)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–æ—Ä–æ–≥–∞
	if newData.MessageCount >= newData.Threshold {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
		sendGif(chatID, gifID)

		// –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
		if err := botData.ResetChatCounter(chatID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		} else {
			log.Printf("–ß–∞—Ç %d: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ %d, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–∏—Ñ–∫–∞", chatID, newData.Threshold)
		}
	}
}

func sendWelcomeMessage(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∏—Ñ–∫—É –∫–∞–∂–¥—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"+
		"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
		"/set N - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π (1-10000)\n"+
		"/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"+
		"/reset - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"+
		"‚ö° –ü—Ä–∏–º–µ—Ä: /set 50 - –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–∏—Ñ–∫—É –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π")

	msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func handleSetCommand(message *tgbotapi.Message, botData *BotData) {
	chatID := message.Chat.ID
	args := message.CommandArguments()

	if args == "" {
		sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä: `/set 50`")
		return
	}

	threshold, err := strconv.Atoi(args)
	if err != nil || threshold <= 0 {
		sendMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
		return
	}

	if threshold > maxMessages {
		sendMessage(chatID, fmt.Sprintf("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", maxMessages))
		return
	}

	chatData := ChatData{
		Threshold:    threshold,
		MessageCount: 0,
	}

	if err := botData.SetChatData(chatID, chatData); err != nil {
		sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	sendMessage(chatID, fmt.Sprintf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥: *%d —Å–æ–æ–±—â–µ–Ω–∏–π*\n–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ *0*", threshold))
	log.Printf("–ß–∞—Ç %d: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ %d —Å–æ–æ–±—â–µ–Ω–∏–π", chatID, threshold)
}

func handleStatusCommand(message *tgbotapi.Message, botData *BotData) {
	chatID := message.Chat.ID

	chatData, exists := botData.GetChatData(chatID)
	if !exists || chatData.Threshold == 0 {
		sendMessage(chatID, "üìä –ü–æ—Ä–æ–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set N`")
		return
	}

	progress := float64(chatData.MessageCount) / float64(chatData.Threshold) * 100
	messageText := fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å:\n"+
		"‚Ä¢ –ü–æ—Ä–æ–≥: *%d —Å–æ–æ–±—â–µ–Ω–∏–π*\n"+
		"‚Ä¢ –û—Ç—Å—á–∏—Ç–∞–Ω–æ: *%d/%d*\n"+
		"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: *%.1f%%*",
		chatData.Threshold, chatData.MessageCount, chatData.Threshold, progress)

	sendMessage(chatID, messageText)
}

func handleResetCommand(message *tgbotapi.Message, botData *BotData) {
	chatID := message.Chat.ID

	if err := botData.ResetChatCounter(chatID); err != nil {
		sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞")
		log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	sendMessage(chatID, "üîÑ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ *0*")
	log.Printf("–ß–∞—Ç %d: —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω", chatID)
}

func sendGif(chatID int64, gifID string) {
	gif := tgbotapi.NewAnimation(chatID, tgbotapi.FileID(gifID))
	gif.Caption = "üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π!"

	if _, err := bot.Send(gif); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –≤ —á–∞—Ç %d: %v", chatID, err)
		sendMessage(chatID, "üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π! (–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É)")
	}
}

func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
	}
}
